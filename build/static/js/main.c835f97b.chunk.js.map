{"version":3,"sources":["context.js","Todo/TaskItem.js","Todo/TaskList.js","Todo/AddTodo.js","App.js","reportWebVitals.js","index.js"],"names":["Context","React","createContext","TodoItem","todo","index","onChange","removeTodo","useContext","classes","important","push","className","join","title","type","checked","id","htmlFor","onClick","bind","TodoList","props","todos","map","onToggle","AddTodo","onCreate","useState","value","setValue","onSubmit","event","preventDefault","trim","placeholder","target","App","setTodos","Provider","filter","concat","Date","now","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qLAIeA,G,MAFCC,IAAMC,iB,OCqCPC,MAnCf,YAA4C,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,SACvBC,EAAcC,qBAAWR,GAAzBO,WACDE,EAAU,GAMhB,OAJIL,EAAKM,WACPD,EAAQE,KAAK,aAIb,qBAAIC,UAAU,cAAd,UACE,uBAAMA,UAAWH,EAAQI,KAAK,KAA9B,UACE,iCAASR,EAAO,IACfD,EAAKU,SAER,uBAAMF,UAAU,wBAAhB,UACE,uBACEA,UAAU,kBACVG,KAAK,WACLC,QAASZ,EAAKM,UACdJ,SAAU,kBAAMA,EAASF,EAAKa,OAEhC,uBAAOL,UAAU,eAAeM,QAAQ,MAAxC,kBAGF,wBAAQN,UAAU,mBAAmBO,QAASZ,EAAWa,KAAK,KAAMhB,EAAKa,IAAzE,8BCHSI,MArBf,SAAkBC,GAChB,OACE,oBAAIV,UAAU,cAAd,SACIU,EAAMC,MAAMC,KAAI,SAACpB,EAAMC,GACvB,OACE,cAAC,EAAD,CACED,KAAMA,EAENC,MAAOA,EACPC,SAAUgB,EAAMG,UAFXrB,EAAKa,UCgBPS,MAxBf,YAAgC,IAAbC,EAAY,EAAZA,SACjB,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAWA,OACE,uBAAMlB,UAAU,OAAOmB,SAVzB,SAAuBC,GACrBA,EAAMC,iBAEHJ,EAAMK,SACPP,EAASE,GACTC,EAAS,MAKX,UACE,uBAAOlB,UAAU,cAAcuB,YAAY,eAAeN,MAAOA,EAAOvB,SAAU,SAAA0B,GAAK,OAAIF,EAASE,EAAMI,OAAOP,UACjH,wBAAQjB,UAAU,YAAYG,KAAK,SAAnC,qBCgCSsB,MA5Cf,WACE,MAA0BpC,IAAM2B,SAAS,CACzC,CAACX,GAAI,EAAGP,WAAW,EAAOI,MAAO,eACjC,CAACG,GAAI,EAAGP,WAAW,EAAOI,MAAO,aACjC,CAACG,GAAI,EAAGP,WAAW,EAAOI,MAAO,kBAHjC,mBAAOS,EAAP,KAAce,EAAd,KA+BA,OACE,cAAC,EAAQC,SAAT,CAAkBV,MAAO,CAACtB,WAf5B,SAAoBU,GAClBqB,EAASf,EAAMiB,QAAO,SAAApC,GAAI,OAAIA,EAAKa,KAAOA,QAc1C,SACE,sBAAKL,UAAU,QAAf,UACE,8CACA,cAAC,EAAD,CAASe,SAdf,SAAiBb,GACfwB,EAASf,EAAMkB,OAAO,CACpB,CACA3B,QACAG,GAAIyB,KAAKC,MACTjC,WAAW,SAWRa,EAAMqB,OAAS,cAAC,EAAD,CAAUrB,MAAOA,EAAOE,SA/B9C,SAAoBR,GAClBqB,EACEf,EAAMC,KAAI,SAAApB,GAIR,OAHIA,EAAKa,KAAOA,IACdb,EAAKM,WAAaN,EAAKM,WAElBN,SAyB2D,sBAAKQ,UAAU,WAAf,UAA0B,oDAA0B,6DChC/GiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.c835f97b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Context = React.createContext()\r\n\r\nexport default Context","import React, {useContext} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Context from '../context'\r\n\r\nfunction TodoItem({todo, index, onChange}) {\r\n  const {removeTodo} = useContext(Context)\r\n  const classes = []\r\n\r\n  if (todo.important) {\r\n    classes.push('important')\r\n  }\r\n\r\n  return (\r\n    <li className='tasks__item'>\r\n      <span className={classes.join(' ')}>\r\n        <strong>{index +1}</strong>\r\n        {todo.title}\r\n      </span>\r\n      <span className='tasks__important--btn'>\r\n        <input\r\n          className='tasks__btn--inp'\r\n          type='checkbox'\r\n          checked={todo.important}\r\n          onChange={() => onChange(todo.id)}\r\n        />\r\n        <label className='tasks__label' htmlFor=\"imp\">!</label>\r\n      </span>\r\n\r\n      <button className='tasks__btn--done' onClick={removeTodo.bind(null, todo.id)}>&#128504;</button>\r\n    </li>\r\n  )\r\n}\r\n\r\nTodoItem.propTypes = {\r\n  todo: PropTypes.object.isRequired,\r\n  index: PropTypes.number,\r\n  onChange: PropTypes.func.isRequired\r\n}\r\n\r\nexport default TodoItem\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport TodoItem from './TaskItem'\r\n\r\nfunction TodoList(props) {\r\n  return (\r\n    <ul className='tasks__list'>\r\n      { props.todos.map((todo, index) => {\r\n        return (\r\n          <TodoItem\r\n            todo={todo}\r\n            key={todo.id}\r\n            index={index}\r\n            onChange={props.onToggle}\r\n          />)\r\n      }) }\r\n    </ul>\r\n  )\r\n}\r\n\r\nTodoList.propTypes = {\r\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  onToggle: PropTypes.func.isRequired\r\n}\r\n\r\nexport default TodoList","import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nfunction AddTodo({ onCreate }) {\r\n  const [value, setValue] = useState('')\r\n\r\n  function submitHandler(event) {\r\n    event.preventDefault()\r\n\r\n    if(value.trim()) {\r\n      onCreate(value)\r\n      setValue('')\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <form className='form' onSubmit={submitHandler}>\r\n      <input className='form__input' placeholder='Add any task' value={value} onChange={event => setValue(event.target.value)}/>\r\n      <button className='form__btn' type='submit'>Add</button>\r\n    </form>\r\n  )\r\n}\r\n\r\nAddTodo.propTypes = {\r\n  onCreate: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddTodo","import React from 'react'\nimport './Scss/App.scss'\nimport TodoList from './Todo/TaskList'\nimport Context from './context'\nimport AddTodo from './Todo/AddTodo'\n\nfunction App() {\n  const [todos, setTodos] = React.useState([\n  {id: 1, important: false, title: 'Make markup'},\n  {id: 2, important: false, title: 'Set style'},\n  {id: 3, important: false, title: 'Wite JS code'}\n  ])\n\n  function toggleTodo(id) {\n    setTodos(\n      todos.map(todo => {\n        if (todo.id === id) {\n          todo.important = !todo.important\n        }\n        return todo\n      })\n    )\n  }\n\n  function removeTodo(id) {\n    setTodos(todos.filter(todo => todo.id !== id))\n  }\n\n  function addTodo(title) {\n    setTodos(todos.concat([\n      {\n      title,\n      id: Date.now(),\n      important: false\n      }\n  ]))\n  }\n\n  return (\n    <Context.Provider value={{removeTodo}}>\n      <div className='tasks'>\n        <h1> React tasks</h1>\n        <AddTodo onCreate={addTodo} />\n\n        {todos.length ? <TodoList todos={todos} onToggle={toggleTodo}/> : <div className='no-tasks'><p>Oops, not any task!</p><p>Pleas add any task!</p></div>}\n      </div>\n    </Context.Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}